* To read document for any python module :- use `pydoc modulename`


* __dict__
   -> https://medium.com/analytics-vidhya/dict-attribute-and-vars-function-in-python-42d82dbaba73

   => used to store an object’s (writable) attributes
   => is also called `mappingproxy` object

* __missing__ 
   -> dunder on dict type objects


* When you are running any file via python p1.py 
   -> then for p1 __name__ == __main__ i.e 
      namespace of that p1.py module for that program at moment is from __main__ 

      So if you want to import any items from same module inside same module you need to use 

      from __main__ import obj

   * timeit & namespace :
     ---------------
      -> http://www.openbookproject.net/books/pythonds/AlgorithmAnalysis/Lists.html


* Extended unpacking, starred assignment, slice assignment  
  -------------------------
   -> behaves greedily with iterator & iterate through the generatpr/iterator at once at time of assigning or definition

* Circular reference :
  --------------
   -> ...

* sys argv tip :
  ---------- 
  => When we use sys.argv list then, 
     first element will be module_name if run from command line & not in idle


* dis module :
  --------
   -> use to analyze CPython bytecode


* splat (i.e unpack) operator : {*, **}
  -------------

* accumulate vs reduce :
  ----
   -> Accumulate provides you all intermediate results in finding reduce() answer

  => Do sorting by key() before doing groupby() same key


* `+=` when used with mutable types such as `list` will perform inplace operation i.e `iconcat()`

* `time.perf_counter()` doesnt uses actually clock but it uses CPU clock cycles 
                        so you always need to use 2 time instances of perf_counter & subtraction 
                        to calculate elapsed time

* View vs Copy :
  ---------
   eg dict.keys()
   -> View is not copy of any iterable but its kinda Window to access that iterable
   -> They provide a dynamic view on the dictionary’s entries, 
      which means that when the dictionary changes, the view reflects these changes


* repr() vs str() :
  -----------
   repr() :- goal is to be unambiguous
   str()  :- goal is to be readable

   repr() is more like a python command so (it can be used with eval)

* Exception vs BaseException :
  ----------
   Exception :- is meant for all logical code ie funtion & classes
   BaseException :- parent, can catch sys.exit() exception 

   also bare except:  - will not get interrupt via ctrl+c 
        but except Except will get interrupt via ctrl + c